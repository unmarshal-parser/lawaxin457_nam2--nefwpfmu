// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ExcludeFromFees extends ethereum.Event {
  get params(): ExcludeFromFees__Params {
    return new ExcludeFromFees__Params(this);
  }
}

export class ExcludeFromFees__Params {
  _event: ExcludeFromFees;

  constructor(event: ExcludeFromFees) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isExcluded(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SwapAndLiquify extends ethereum.Event {
  get params(): SwapAndLiquify__Params {
    return new SwapAndLiquify__Params(this);
  }
}

export class SwapAndLiquify__Params {
  _event: SwapAndLiquify;

  constructor(event: SwapAndLiquify) {
    this._event = event;
  }

  get tokensSwapped(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ethReceived(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensIntoLiqudity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SwapAndSendMarketing extends ethereum.Event {
  get params(): SwapAndSendMarketing__Params {
    return new SwapAndSendMarketing__Params(this);
  }
}

export class SwapAndSendMarketing__Params {
  _event: SwapAndSendMarketing;

  constructor(event: SwapAndSendMarketing) {
    this._event = event;
  }

  get tokensSwapped(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ethSend(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SwapTokensAtAmountUpdated extends ethereum.Event {
  get params(): SwapTokensAtAmountUpdated__Params {
    return new SwapTokensAtAmountUpdated__Params(this);
  }
}

export class SwapTokensAtAmountUpdated__Params {
  _event: SwapTokensAtAmountUpdated;

  constructor(event: SwapTokensAtAmountUpdated) {
    this._event = event;
  }

  get swapTokensAtAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isExcludedFromFees(account: Address): boolean {
    let result = super.call(
      "isExcludedFromFees",
      "isExcludedFromFees(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isExcludedFromFees(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isExcludedFromFees",
      "isExcludedFromFees(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidityFeeOnBuy(): BigInt {
    let result = super.call(
      "liquidityFeeOnBuy",
      "liquidityFeeOnBuy():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityFeeOnBuy(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityFeeOnBuy",
      "liquidityFeeOnBuy():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityFeeOnSell(): BigInt {
    let result = super.call(
      "liquidityFeeOnSell",
      "liquidityFeeOnSell():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityFeeOnSell(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityFeeOnSell",
      "liquidityFeeOnSell():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketingFeeOnBuy(): BigInt {
    let result = super.call(
      "marketingFeeOnBuy",
      "marketingFeeOnBuy():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_marketingFeeOnBuy(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketingFeeOnBuy",
      "marketingFeeOnBuy():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketingFeeOnSell(): BigInt {
    let result = super.call(
      "marketingFeeOnSell",
      "marketingFeeOnSell():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_marketingFeeOnSell(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketingFeeOnSell",
      "marketingFeeOnSell():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uniswapV2Pair(): Address {
    let result = super.call("uniswapV2Pair", "uniswapV2Pair():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapV2Pair(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV2Pair",
      "uniswapV2Pair():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniswapV2Router(): Address {
    let result = super.call(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniswapV2Router(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimStuckTokensCall extends ethereum.Call {
  get inputs(): ClaimStuckTokensCall__Inputs {
    return new ClaimStuckTokensCall__Inputs(this);
  }

  get outputs(): ClaimStuckTokensCall__Outputs {
    return new ClaimStuckTokensCall__Outputs(this);
  }
}

export class ClaimStuckTokensCall__Inputs {
  _call: ClaimStuckTokensCall;

  constructor(call: ClaimStuckTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimStuckTokensCall__Outputs {
  _call: ClaimStuckTokensCall;

  constructor(call: ClaimStuckTokensCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DisableBuyTaxCall extends ethereum.Call {
  get inputs(): DisableBuyTaxCall__Inputs {
    return new DisableBuyTaxCall__Inputs(this);
  }

  get outputs(): DisableBuyTaxCall__Outputs {
    return new DisableBuyTaxCall__Outputs(this);
  }
}

export class DisableBuyTaxCall__Inputs {
  _call: DisableBuyTaxCall;

  constructor(call: DisableBuyTaxCall) {
    this._call = call;
  }
}

export class DisableBuyTaxCall__Outputs {
  _call: DisableBuyTaxCall;

  constructor(call: DisableBuyTaxCall) {
    this._call = call;
  }
}

export class DisableSellTaxCall extends ethereum.Call {
  get inputs(): DisableSellTaxCall__Inputs {
    return new DisableSellTaxCall__Inputs(this);
  }

  get outputs(): DisableSellTaxCall__Outputs {
    return new DisableSellTaxCall__Outputs(this);
  }
}

export class DisableSellTaxCall__Inputs {
  _call: DisableSellTaxCall;

  constructor(call: DisableSellTaxCall) {
    this._call = call;
  }
}

export class DisableSellTaxCall__Outputs {
  _call: DisableSellTaxCall;

  constructor(call: DisableSellTaxCall) {
    this._call = call;
  }
}

export class EnableBuyTaxCall extends ethereum.Call {
  get inputs(): EnableBuyTaxCall__Inputs {
    return new EnableBuyTaxCall__Inputs(this);
  }

  get outputs(): EnableBuyTaxCall__Outputs {
    return new EnableBuyTaxCall__Outputs(this);
  }
}

export class EnableBuyTaxCall__Inputs {
  _call: EnableBuyTaxCall;

  constructor(call: EnableBuyTaxCall) {
    this._call = call;
  }
}

export class EnableBuyTaxCall__Outputs {
  _call: EnableBuyTaxCall;

  constructor(call: EnableBuyTaxCall) {
    this._call = call;
  }
}

export class EnableGamerCall extends ethereum.Call {
  get inputs(): EnableGamerCall__Inputs {
    return new EnableGamerCall__Inputs(this);
  }

  get outputs(): EnableGamerCall__Outputs {
    return new EnableGamerCall__Outputs(this);
  }
}

export class EnableGamerCall__Inputs {
  _call: EnableGamerCall;

  constructor(call: EnableGamerCall) {
    this._call = call;
  }
}

export class EnableGamerCall__Outputs {
  _call: EnableGamerCall;

  constructor(call: EnableGamerCall) {
    this._call = call;
  }
}

export class EnableSellTaxCall extends ethereum.Call {
  get inputs(): EnableSellTaxCall__Inputs {
    return new EnableSellTaxCall__Inputs(this);
  }

  get outputs(): EnableSellTaxCall__Outputs {
    return new EnableSellTaxCall__Outputs(this);
  }
}

export class EnableSellTaxCall__Inputs {
  _call: EnableSellTaxCall;

  constructor(call: EnableSellTaxCall) {
    this._call = call;
  }
}

export class EnableSellTaxCall__Outputs {
  _call: EnableSellTaxCall;

  constructor(call: EnableSellTaxCall) {
    this._call = call;
  }
}

export class ExcludeFromFeesCall extends ethereum.Call {
  get inputs(): ExcludeFromFeesCall__Inputs {
    return new ExcludeFromFeesCall__Inputs(this);
  }

  get outputs(): ExcludeFromFeesCall__Outputs {
    return new ExcludeFromFeesCall__Outputs(this);
  }
}

export class ExcludeFromFeesCall__Inputs {
  _call: ExcludeFromFeesCall;

  constructor(call: ExcludeFromFeesCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get excluded(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ExcludeFromFeesCall__Outputs {
  _call: ExcludeFromFeesCall;

  constructor(call: ExcludeFromFeesCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnePercentTaxCall extends ethereum.Call {
  get inputs(): OnePercentTaxCall__Inputs {
    return new OnePercentTaxCall__Inputs(this);
  }

  get outputs(): OnePercentTaxCall__Outputs {
    return new OnePercentTaxCall__Outputs(this);
  }
}

export class OnePercentTaxCall__Inputs {
  _call: OnePercentTaxCall;

  constructor(call: OnePercentTaxCall) {
    this._call = call;
  }
}

export class OnePercentTaxCall__Outputs {
  _call: OnePercentTaxCall;

  constructor(call: OnePercentTaxCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetDWalletCall extends ethereum.Call {
  get inputs(): SetDWalletCall__Inputs {
    return new SetDWalletCall__Inputs(this);
  }

  get outputs(): SetDWalletCall__Outputs {
    return new SetDWalletCall__Outputs(this);
  }
}

export class SetDWalletCall__Inputs {
  _call: SetDWalletCall;

  constructor(call: SetDWalletCall) {
    this._call = call;
  }

  get newDWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDWalletCall__Outputs {
  _call: SetDWalletCall;

  constructor(call: SetDWalletCall) {
    this._call = call;
  }
}

export class SetMWalletCall extends ethereum.Call {
  get inputs(): SetMWalletCall__Inputs {
    return new SetMWalletCall__Inputs(this);
  }

  get outputs(): SetMWalletCall__Outputs {
    return new SetMWalletCall__Outputs(this);
  }
}

export class SetMWalletCall__Inputs {
  _call: SetMWalletCall;

  constructor(call: SetMWalletCall) {
    this._call = call;
  }

  get newMWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMWalletCall__Outputs {
  _call: SetMWalletCall;

  constructor(call: SetMWalletCall) {
    this._call = call;
  }
}

export class SetSwapEnabledCall extends ethereum.Call {
  get inputs(): SetSwapEnabledCall__Inputs {
    return new SetSwapEnabledCall__Inputs(this);
  }

  get outputs(): SetSwapEnabledCall__Outputs {
    return new SetSwapEnabledCall__Outputs(this);
  }
}

export class SetSwapEnabledCall__Inputs {
  _call: SetSwapEnabledCall;

  constructor(call: SetSwapEnabledCall) {
    this._call = call;
  }

  get _enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSwapEnabledCall__Outputs {
  _call: SetSwapEnabledCall;

  constructor(call: SetSwapEnabledCall) {
    this._call = call;
  }
}

export class SetSwapTokensAtAmountCall extends ethereum.Call {
  get inputs(): SetSwapTokensAtAmountCall__Inputs {
    return new SetSwapTokensAtAmountCall__Inputs(this);
  }

  get outputs(): SetSwapTokensAtAmountCall__Outputs {
    return new SetSwapTokensAtAmountCall__Outputs(this);
  }
}

export class SetSwapTokensAtAmountCall__Inputs {
  _call: SetSwapTokensAtAmountCall;

  constructor(call: SetSwapTokensAtAmountCall) {
    this._call = call;
  }

  get newAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapTokensAtAmountCall__Outputs {
  _call: SetSwapTokensAtAmountCall;

  constructor(call: SetSwapTokensAtAmountCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TwoPercentTaxCall extends ethereum.Call {
  get inputs(): TwoPercentTaxCall__Inputs {
    return new TwoPercentTaxCall__Inputs(this);
  }

  get outputs(): TwoPercentTaxCall__Outputs {
    return new TwoPercentTaxCall__Outputs(this);
  }
}

export class TwoPercentTaxCall__Inputs {
  _call: TwoPercentTaxCall;

  constructor(call: TwoPercentTaxCall) {
    this._call = call;
  }
}

export class TwoPercentTaxCall__Outputs {
  _call: TwoPercentTaxCall;

  constructor(call: TwoPercentTaxCall) {
    this._call = call;
  }
}

export class WithdrawETHCall extends ethereum.Call {
  get inputs(): WithdrawETHCall__Inputs {
    return new WithdrawETHCall__Inputs(this);
  }

  get outputs(): WithdrawETHCall__Outputs {
    return new WithdrawETHCall__Outputs(this);
  }
}

export class WithdrawETHCall__Inputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }
}

export class WithdrawETHCall__Outputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }
}
